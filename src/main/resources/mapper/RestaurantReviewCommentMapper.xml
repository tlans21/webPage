<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="HomePage.mapper.RestaurantReviewCommentMapper">

    <resultMap id="RestaurantReviewCommentResultMap" type="HomePage.domain.model.entity.RestaurantReviewComment">
        <id property="id" column="id"/>
        <result property="restaurantId" column="restaurant_id"/>
        <result property="userId" column="user_id"/>
        <result property="content" column="content"/>
        <result property="registerDate" column="created_at"/>
        <result property="updateDate" column="updated_at"/>
        <result property="rating" column="rating"/>
        <result property="writer" column="writer"/>
        <result property="likeCount" column="like_count"/>
        <result property="dislikeCount" column="dislike_count"/>
    </resultMap>

    <insert id="save" parameterType="HomePage.domain.model.entity.RestaurantReviewComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO security.restaurant_review_comments (restaurant_id, user_id, content, created_at, updated_at, rating)
        VALUES (#{restaurantId}, #{userId}, #{content}, #{registerDate}, #{updateDate}, #{rating})
    </insert>

    <select id="findById" parameterType="long" resultMap="RestaurantReviewCommentResultMap">
        SELECT * FROM security.restaurant_review_comments WHERE id = #{id}
    </select>

    <select id="findByRestaurantId" parameterType="long" resultMap="RestaurantReviewCommentResultMap">
        SELECT * FROM security.restaurant_review_comments WHERE restaurant_id = #{restaurantId}
        ORDER BY created_at DESC
    </select>

    <select id="findByRestaurantIdWithJoin" parameterType="long" resultMap="RestaurantReviewCommentResultMap">
        SELECT
            r.*,
            u.username as writer,
            SUM(CASE WHEN l.isLike = 1 THEN 1 ELSE 0 END) as like_count,
            SUM(CASE WHEN l.isLike = 0 THEN 1 ELSE 0 END) as dislike_count
        FROM
            security.restaurant_review_comments r
            LEFT JOIN security.user u ON r.user_id = u.id
            LEFT JOIN security.likes l ON r.id = l.target_id
                AND l.target_type = 'REVIEW'
        WHERE
            r.restaurant_id = #{restaurantId}
        GROUP BY
            r.id,
            r.user_id,
            r.restaurant_id,
            u.username,
            r.content,
            r.created_at,
            r.updated_at,
            r.deleted_at,
            r.rating
        ORDER BY
            r.created_at DESC
    </select>

    <update id="update" parameterType="HomePage.domain.model.entity.RestaurantReviewComment">
        UPDATE security.restaurant_review_comments
        SET content = #{content}, updated_at = #{updatedDate}
        WHERE id = #{id}
    </update>
    <update id="updateRatingByRestaurantId">
        UPDATE security.restaurant_review_comments
        SET rating = #{rating}
        WHERE id = #{rest
    </update>

    <delete id="deleteById" parameterType="long">
        DELETE FROM security.restaurant_review_comments WHERE id = #{id}
    </delete>

    <select id="findAll" resultMap="RestaurantReviewCommentResultMap">
        SELECT * FROM security.restaurant_review_comments
        ORDER BY created_at DESC
    </select>

    <select id="countByRestaurantId" parameterType="long" resultType="int">
        SELECT COUNT(*) FROM security.restaurant_review_comments WHERE restaurant_id = #{restaurantId}
    </select>

    <select id="findByRestaurantIdWithPagination" resultMap="RestaurantReviewCommentResultMap">
        SELECT * FROM security.restaurant_review_comments
        WHERE restaurant_id = #{restaurantId}
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

</mapper>